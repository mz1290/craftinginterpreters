// Code generated by generateAST; DO NOT EDIT.
package ast

import (
	"github.com/mz1290/golox/internal/pkg/token"
)

type Expr interface {
	ExprAcceptor
}

type ExprVisitor interface {
	VisitAssignExpr(expr Assign) (interface{}, error)
	VisitBinaryExpr(expr Binary) (interface{}, error)
	VisitCallExpr(expr Call) (interface{}, error)
	VisitGetExpr(expr Get) (interface{}, error)
	VisitGroupingExpr(expr Grouping) (interface{}, error)
	VisitLiteralExpr(expr Literal) (interface{}, error)
	VisitLogicalExpr(expr Logical) (interface{}, error)
	VisitSetExpr(expr Set) (interface{}, error)
	VisitThisExpr(expr This) (interface{}, error)
	VisitUnaryExpr(expr Unary) (interface{}, error)
	VisitVariableExpr(expr Variable) (interface{}, error)
}

type ExprAcceptor interface {
	Accept(v ExprVisitor) (interface{}, error)
}

type Assign struct {
	Name *token.Token
	Value Expr
}

func (x Assign) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitAssignExpr(x)
}

type Binary struct {
	Left Expr
	Operator *token.Token
	Right Expr
}

func (x Binary) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitBinaryExpr(x)
}

type Call struct {
	Callee Expr 
	Paren *token.Token
	Arguments []Expr
}

func (x Call) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitCallExpr(x)
}

type Get struct {
	Object Expr
	Name *token.Token
}

func (x Get) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitGetExpr(x)
}

type Grouping struct {
	Expression Expr
}

func (x Grouping) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitGroupingExpr(x)
}

type Literal struct {
	Value interface{}
}

func (x Literal) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitLiteralExpr(x)
}

type Logical struct {
	Left Expr
	Operator *token.Token
	Right Expr
}

func (x Logical) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitLogicalExpr(x)
}

type Set struct {
	Object Expr
	Name *token.Token
	Value Expr
}

func (x Set) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitSetExpr(x)
}

type This struct {
	Keyword *token.Token
}

func (x This) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitThisExpr(x)
}

type Unary struct {
	Operator *token.Token
	Right Expr
}

func (x Unary) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitUnaryExpr(x)
}

type Variable struct {
	Name *token.Token
}

func (x Variable) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitVariableExpr(x)
}

