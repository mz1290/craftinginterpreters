// Code generated by generateAST; DO NOT EDIT.
package ast

import (
	"github.com/mz1290/golox/internal/pkg/token"
)

type Expr interface {
	ExprAcceptor
}

type ExprVisitor interface {
	VisitBinaryExpr(expr Binary) (interface{}, error)
	VisitGroupingExpr(expr Grouping) (interface{}, error)
	VisitLiteralExpr(expr Literal) (interface{}, error)
	VisitUnaryExpr(expr Unary) (interface{}, error)
}

type ExprAcceptor interface {
	Accept(v ExprVisitor) (interface{}, error)
}

type Binary struct {
	left Expr
	operator token.Token
	right Expr
}

func (x Binary) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitBinaryExpr(x)
}

type Grouping struct {
	expression Expr
}

func (x Grouping) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitGroupingExpr(x)
}

type Literal struct {
	value interface{}
}

func (x Literal) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitLiteralExpr(x)
}

type Unary struct {
	operator token.Token
	right Expr
}

func (x Unary) Accept(v ExprVisitor) (interface{}, error) {
	return v.VisitUnaryExpr(x)
}

